syntax="proto3";

package raft;

enum EntryType {
  UKNOWN = 0;
  CONFIGURATION = 1;
  DATA = 2;
  NOOP = 3;                       // 无操作
}

message LogEntry {
  uint64 term = 1;
  uint64 index = 2;
  EntryType type = 3;
  bytes data = 4;
}

message AppendEntriesReq {
  int64 term = 1;                 // 领导人的任期
  int64 leaderId = 2;             // 领导人ID
  int64 prevLogTerm = 3;          // 紧邻新日志条目之前的那个日志条目的任期
  int64 prevLogIndex = 4;         // 紧邻新日志条目之前的那个日志条目的索引
  repeated LogEntry entries = 5;  // 需要被保存的日志条目
  int64 leaderCommit = 6;         // 领导人的已知已提交的最高的日志条目的索引
}
message AppendEntriesResp {
  int64 term = 1;                 // 当前任期
  bool success = 2;               // 如果跟随者所含有的条目和 prevLogIndex 以及 prevLogTerm 匹配上了，则为 true
}

message RequestVoteReq {
  int64 term = 1;                 // 候选人的任期
  int64 candidateId = 2;          // 请求选票的候选人的 ID
  int64 lastLogTerm = 3;          // 候选人最后日志条目的任期号
  int64 lastLogIndex = 4;	      // 候选人最后日志条目的索引值
}
message RequestVoteResp {
  int64 term = 1;                 // 当前任期号，以便于候选人去更新自己的任期号
  bool voteGranted = 2;           // 候选人赢得了此张选票时为真
}

message InstallSnapshotReq {
  uint64 term = 1;                // 当前任期
  uint64 leaderId = 2;            // 领导人的 ID
  uint64 lastIncludedIndex = 3;   // 快照中最后包含的日志条目的索引值
  uint64 lastIncludedTerm = 4;    // 快照中最后包含的日志条目的任期号
  uint64 offset = 5;              // 分块在快照中的字节偏移量
  bytes data = 6;                 // 分块的数据
  bool done = 7;                  // 如果这是最后一个分块，则为 true
}
message InstallSnapshotResp {
  uint64 term = 1;                // 当前任期，便于领导人更新自己
}

message Server {
  uint64 server_id = 1;           // 服务器 ID
  string address = 2;             // 服务器的地址
}


// Raft共识算法RPC服务
service ConsensusService {
  rpc AppendEntries (AppendEntriesReq) returns (AppendEntriesResp) {}          // 附加日志条目RPC
  rpc RequestVote (RequestVoteReq) returns (RequestVoteResp) {}                // 请求选票RPC
  rpc InstallSnapshot (InstallSnapshotReq) returns (InstallSnapshotResp) {}    // 安装快照RPC
}